


#########################################
#                                       #
# Variant Calling Pipeline              #
#                                       #
#########################################



fastq-mcf:  # Non default, run with --trim-software fastq-mcf to use it
    '{executable}
     -u
     -q 20
     -P 33
     -x 10
     -l 50
     -o {forward_output}
     -o {reverse_output}
     {illumina_adapters}
     {forward_reads}
     {reverse_reads}'

cutadapt:  # Default for TrimAdapters
  '{executable}
   --error-rate=0.1
   --overlap=15
   -q 20,20
   --max-n=10
   --minimum-length=50
   -b file:{illumina_adapters_fwd}
   -B file:{illumina_adapters_rev}
   --output={forward_output}
   --paired-output={reverse_output}
   {forward_reads}
   {reverse_reads}'

bwa:
    # output goes to STDOUT
    '{executable} mem
     -t 8
     {reference_genome}
     {forward_reads}
     {reverse_reads}'

picard AddOrReplaceReadGroups:
    # SO = SortOrder for the output
    '{executable}
     AddOrReplaceReadGroups
     I={input_sam}
     RGID={flowcell_id}.{lane_number}.{sample_barcode}
     RGSM={sample_barcode}
     RGLB={library_id}
     RGPL={platform}
     RGPU={flowcell_id}.{lane_number}.{sample_barcode}
     O={output_bam}
     SO=coordinate
     CREATE_INDEX=True
     VALIDATION_STRINGENCY=LENIENT'

gatk RealignerTargetCreator:
    '{executable}
     -T RealignerTargetCreator
     -I {input_bam}
     -R {reference_genome}
     -known {indels_1000G}
     -known {indels_mills}
     -L {panel_regions}
     -l INFO
     -o {outfile}'

gatk IndelRealigner:
    '{executable}
     -T IndelRealigner
     -I {input_bam}
     -R {reference_genome}
     -targetIntervals {targets_file}
     -l INFO
     -o {output_bam}'

gatk BaseRecalibrator:
    '{executable}
     -T BaseRecalibrator
     -nct 1
     -I {input_bam}
     -R {reference_genome}
     -L {panel_regions}
     -knownSites {indels_1000G}
     -knownSites {indels_mills}
     -l INFO
     -o {outfile}'

gatk PrintReads:
    '{executable}
     -T PrintReads
     -nct 1
     -I {input_bam}
     -BQSR {recalibration_table}
     -R {reference_genome}
     -l INFO
     -o {output_bam}'

# gatk HaplotypeCaller variant_sites for_exomes:
    # # https://software.broadinstitute.org/gatk/documentation/tooldocs/current/org_broadinstitute_gatk_engine_CommandLineGATK.php#--interval_padding
    # # --interval_padding: This is typically used to add padding around exons
    # # when analyzing exomes. The general Broad exome calling pipeline uses
    # # 100 bp padding by default.
    # '{executable}
     # -T HaplotypeCaller
     # -I {input_bam}
     # -gt_mode DISCOVERY
     # -ERC BP_RESOLUTION
     # -variant_index_parameter 128000
     # -variant_index_type LINEAR
     # --interval_padding 100
     # -L {panel_regions}
     # -R {reference_genome}
     # -D {dbsnp_GRCh37}
     # -nct 8
     # -l INFO
     # -o {output_vcf}'

gatk HaplotypeCaller:

    # This step is the same for two pipelines:
    #
    #  - "all_sites"
    #  - "variant_sites"
    #
    #  The "target_sites" pipeline uses other settings.

    '{executable}
     -T HaplotypeCaller
     -I {input_bam}
     -gt_mode DISCOVERY
     -ERC GVCF
     -variant_index_parameter 128000
     -variant_index_type LINEAR
     -L {panel_regions}
     -R {reference_genome}
     -D {dbsnp_GRCh37}
     -o {output_gvcf}
     -l INFO
     -bamout {output_bam}'

    # The -nt and -nct options can't be used when asking for a -bamout

gatk HaplotypeCaller target_sites:

    # GENOTYPE_GIVEN_ALLELES is not very well documented in GATK's guides.
    # https://software.broadinstitute.org/gatk/documentation/article?id=2803
    #
    # -gt_mode and -alleles options to include the panel sites only
    # -L seems to be necessary; the regions include the alleles anyway
    # -ERC cannot be set when GGA is set

    '{executable}
     -T HaplotypeCaller
     -I {input_bam}
     -gt_mode GENOTYPE_GIVEN_ALLELES
     -alleles {panel_variants}
     -L {panel_regions}
     -R {reference_genome}
     -D {dbsnp_GRCh37}
     -o {output_vcf}
     -l INFO
     -bamout {output_bam}'

gatk GenotypeGVCFs all_sites:
    # The {input_gvcfs} will be filled in the corresponding
    # task with -V <GVCF path> for each sample GVCF.
    '{executable}
     -T GenotypeGVCFs
     -allSites
     -L {panel_regions}
     -R {reference_genome}
     -D {dbsnp_GRCh37}
     -nt 1
     {input_gvcfs}
     -l INFO
     -o {output_vcf}'

gatk GenotypeGVCFs variant_sites:

    # The only difference between this step and the same step above,
    # of the "all_sites" pipeline, is the missing -allSites parameter.

    # The {input_gvcfs} will be filled in the corresponding
    # task with -V <GVCF path> for each sample GVCF.
    '{executable}
     -T GenotypeGVCFs
     -L {panel_regions}
     -R {reference_genome}
     -D {dbsnp_GRCh37}
     -nt 8
     {input_gvcfs}
     -l INFO
     -o {output_vcf}'

bcftools reset_filters:

    # This step belongs to the "target_sites" pipeline.
    #
    # It's necessary because GATK's HaplotypeCaller will mark every
    # 0/0 genotype as "LowQual", even though they have good depth and
    # quality.
    #
    # This user seems to have had the same issue, but no satisfactory answer
    # was given: http://gatkforums.broadinstitute.org/gatk/discussion/6615/many-lowqual-flags-in-output-vcf-when-using-haplotypecaller-with-alleles-arg

    '{executable}
     annotate
     --remove FILTER,QUAL
     --output-type v
     --output {output_vcf}
     {input_vcf}'

gatk CombineVariants:
    # The {input_vcfs} will be filled in the corresponding
    # task with -V <VCF path> for each sample VCF.
    '{executable}
     -T CombineVariants
     -nt 8
     -R {reference_genome}
     {input_vcfs}
     -l INFO
     -o {output_vcf}'

snpsift dbSNP:
     # output goes to STDOUT
    '{executable}
     annotate
     -v
     -noAlt
     -id
     -sorted
     {dbsnp_GRCh37}
     {input_vcf}'

gatk SelectVariants snps:
    '{executable}
     -T SelectVariants
     -selectType SNP
     -nt 8
     -R {reference_genome}
     -V {input_vcf}
     -l INFO
     -o {output_vcf}'

gatk SelectVariants indels:
    '{executable}
     -T SelectVariants
     -selectType INDEL
     -nt 8
     -R {reference_genome}
     -V {input_vcf}
     -l INFO
     -o {output_vcf}'

gatk VariantFiltration snps:
    '{executable}
     -T VariantFiltration
     -R {reference_genome}
     -V {input_vcf}
     --filterName QD
     -filter "QD < 2.0"
     --filterName MQ
     -filter "MQ < 40.0"
     --filterName MQRS
     -filter "MQRankSum < -12.5"
     --filterName RPRS
     -filter "ReadPosRankSum < -8.0"
     -l INFO
     -o {output_vcf}'

gatk VariantFiltration indels:
    '{executable}
     -T VariantFiltration
     -R {reference_genome}
     -V {input_vcf}
     --filterName QD
     -filter "QD < 2.0"
     --filterName RPRS
     -filter "ReadPosRankSum < 20.0"
     -l INFO
     -o {output_vcf}'

gatk CombineVariants snps_indels:
    # The :snps and :indels with -priority option are mandatory
    '{executable}
     -T CombineVariants
     -nt 8
     -R {reference_genome}
     -V:snps {input_snps}
     -V:indels {input_indels}
     -genotypeMergeOptions PRIORITIZE
     -priority snps,indels
     -l INFO
     -o {output_vcf}'

gatk VariantFiltration genos:
    '{executable}
     -T VariantFiltration
     -R {reference_genome}
     -V {input_vcf}
     -G_filterName LowGQ
     -G_filter "GQ < {min_gq}"
     -G_filterName LowDP
     -G_filter "DP < {min_dp}"
     -l INFO
     -o {output_vcf}'

    # I originally included this RGQ filter for the all_sites pipeline:
    #
    #   -G_filterName LowRGQ
    #   -G_filter "RGQ < 30.0"
    #
    # However, I found that no 0/0 sites with RGQ reached this step
    # because the previous filter_snps/indels removes them (the 0/0
    # sites are not tagged as either SNP nor INDEL).
    #
    # I'll leave them commented out until a solution for that issue
    # is found.

snpeff annotate:
    '{executable}
    ann
    GRCh37.75
    -canon
    -csvStats {output_summary_csv}
    -nodownload
    -datadir {snpeff_datadir}
    {input_vcf}'

    # I previously used hg19 as database (instead of GRCh37.75).
    # They should be the same.
    # -canon: Only use canonical transcripts.
    # -csvStats: this option creates an extra CSV with stats,
    # which can be later used by multiqc
    # -interval ?

vep annotate:
    # Options are described here:
    # http://www.ensembl.org/info/docs/tools/vep/script/vep_options.html

    '{executable}
     --offline
     --dir {vep_datadir}
     --dir_cache {vep_datadir}
     --dir_plugins {vep_datadir}
     --species homo_sapiens
     --assembly GRCh37
     --fasta {reference_genome_hg19}
     --force_overwrite
     --format vcf
     --tab
     --everything
     --merged
     --html
     --verbose
     -i {input_vcf}
     -o {output_vcf}'

     # {vep_datadir} is specified in ~/.paip/resources.yml
     #
     # The --merged option is important since the local
     # database for VEP is the 'homo_sapiens_merged' one.
     #
     # About the --tab option, I'd rather put this output
     # in a clean tab-delimited file than stuffing the INFO
     # field of the VCF with VEP's huge annotation (which
     # makes the VCF unreadable).

gatk SelectVariants sample:
    '{executable}
     -T SelectVariants
     -nt 1
     -R {reference_genome}
     -V {input_vcf}
     --sample_name {sample}
     -l INFO
     -o {output_vcf}'


gatk SelectVariants reportable:
    "{executable}
     -T SelectVariants
     -nt 1
     -R {reference_genome}
     -V {input_vcf}
     --excludeFiltered
     -select 'vc.getGenotype(\"{sample}\").getGQ() > {min_GQ} && vc.getGenotype(\"{sample}\").getDP() > {min_DP}'
     -l INFO
     -o {output_vcf}"



#########################################
#                                       #
# Quality Control and Metrics Pipeline  #
#                                       #
#########################################



multiqc:
  '{executable}
   --filename {report_filename}
   --force
   {basedir}'


fastqc:
  '{executable}
   {forward_reads}
   {reverse_reads}'


picard CollectAlignmentSummaryMetrics:
  '{executable}
   CollectAlignmentSummaryMetrics
   I={input_bam}
   R={reference_genome}
   O={output_txt}'


picard CollectVariantCallingMetrics:
  '{executable}
   CollectVariantCallingMetrics
   I={input_vcf}
   R={reference_genome}
   DBSNP={dbsnp_GRCh37}
   GVCF_INPUT=true
   O={output_txt}'


gatk VariantEval:
  '{executable}
   -T VariantEval
   --eval {input_vcf}
   -R {reference_genome}
   -D {dbsnp_GRCh37}
   -o {output_file}'


bcftools stats:
  '{executable}
   stats
   {input_vcf}'
   # Output goes to STDOUT


samtools stats:
  '{executable}
   stats
   {input_bam}'
   # Output goes to STDOUT


featureCounts:
  '{executable}
   -a {human_features}
   -o {outfile}
   -T 1
   {input_bam}'


